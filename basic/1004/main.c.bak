/*

2015/10/17 09:52:01

1004. 成绩排名

读入n名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。

输入格式：每个测试输入包含1个测试用例，格式为

  第1行：正整数n
  第2行：第1个学生的姓名 学号 成绩
  第3行：第2个学生的姓名 学号 成绩
  ... ... ...
  第n+1行：第n个学生的姓名 学号 成绩

其中姓名和学号均为不超过10个字符的字符串，成绩为0到100之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。

输出格式：对每个测试用例输出2行，第1行是成绩最高学生的姓名和学号，第2行是成绩最低学生的姓名和学号，字符串间有1空格。
输入样例：

3
Joe Math990112 89
Mike CS991301 100
Mary EE990830 95

输出样例：

Mike CS991301
Joe Math990112

*/




#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<ctype.h>

char * str_trim( char * str  );
char * str_constrict_space( char * str );

void print( char * str  );
int char_negative_index( char * str, char ch );
char * substr( char * dest,char * src, int begin, int end );
int compare( char * input, char * score );

int main( void ){

  int N = 0;
  char input[ 25 ];
  char high[ 25 ];
  char low[ 25 ];
  
  scanf( "%d",&N );
  getchar(  );
  if(  N <= 0 ){
    return 0;
  }
  fgets( input,25,stdin );
  char * t = str_constrict_space(str_trim( input ));

  if( 1 == N ){
  
    print( t );
    print( t );
    return 0;
  }

  strcpy( high,t );
  strcpy( low,t );
  N--;

  while( N-- ){
    fgets( input,25,stdin );
    t = str_constrict_space( str_trim( input ) );
    if( compare( t,high ) > 0 ){
      strcpy( high,t );
    }
    if( compare( t,low ) < 0 ){
      strcpy( low,t );
    }
  }

  print( high );
  print( low );
  return 0;
}

int compare( char * input, char * score ){
  char input_num_str[ 5 ];
  char score_num_str[ 5 ];
  int input_num = atoi( substr(input_num_str,input,char_negative_index( input,' ' ) + 1,strlen( input  ) - 1  ) );
  int score_num = atoi( substr( score_num_str,score,char_negative_index( score,' ' ) + 1,strlen( score ) - 1 ) );
  int res = 0;
  if( input_num > score_num ){
    res = 1;
  }else if( input_num < score_num ){
    res = -1;
  }

  return res;
}

int char_negative_index( char * str, char ch ){
  int len = strlen( str );
  int i = len - 1;
  int pos = -1;
  while( i >= 0 ){
    if(  ch == str[ i ]){
      pos = i;
      break;
    }
    i--;
  }
  return pos;
}

char * substr( char * dest,char * src, int begin, int end ){
  int i = 0;
  while( begin <= end  ){
    dest[ i ] = src[ begin ];
    begin++;
    i++;
  }
  dest[ i ] = '\0';

  return dest;
}


void print( char * str  ){
  int end = char_negative_index( str,' ' );
  int i = 0;
  while( i < end  ){
    putchar( str[ i++ ] );
  }
  putchar( '\n' );
}



/**
 * @brief 将字符串两人边的空白字符删除，并返回一个新的字符串
 *
 * @param str 要处理的字符串
 * 
 * @return 返回删除两边空白字符的新字符串
 */
char * str_trim(  char * str ){
  int str_len = strlen( str );
  int begin = 0;
  int end = str_len - 1;
  int i = 0;

  while( isspace( str[ begin++ ] ) ) ;
  begin--;
  while( isspace( str[ end-- ] ) ) ;
  end++;

  char *t = ( char* )malloc( sizeof( char )*( end - begin + 2 ) );
  i = 0;
  while( begin <= end && ( t[ i++ ] = str[ begin++ ] )) ;
  t[ i ] = '\0';
    
  return t;
}


/**
 * @brief 将字符串中间的空白字符压缩为一个空格，并返回新的字符串
 *
 * @pre 字符串两人边不能有空白字符
 * @param 要处理的字符串
 *
 * @return 返回连续空白转换为一个空格的字符串
 *
 */
char * str_constrict_space( char * str ){
  int str_len = strlen( str );
  char * t = ( char* )malloc( sizeof( str_len ) * str_len );
  int i = -1;
  int j = 0;
  while( i++ < str_len  ){
    if( !isspace( str[ i ] ) ){
      t[ j++ ] = str[ i ];
    }else{
      if( !isspace( str[ i+1 ] ) ){
	t[ j++ ] = ' ';
      }
    }
  }
  t[ j ] = '\0';
  return t;
}
